const express= require('express');
const app= express();
const port=3000;
var mcache = require('memory-cache');
const {check, body ,validationResult} = require('express-validator');
const bodyParser = require('body-parser')
const cors= require('cors');
const swaggerJsdoc= require('swagger-jsdoc');
const swaggerUi= require('swagger-ui-express');
const axios= require('axios');

app.use(cors());
const options = {
    swaggerDefinition: {
      info: {
        title: "Personal Budget API",
        version: "1.0.0",
        description: "Personal Budget API autogenerated by Swagger",
      },
      host: "157.245.141.13:3000",
      basePath: "/",
    },
    apis: ["./server.js"],
  };


const specs = swaggerJsdoc(options);
app.use("/docs", swaggerUi.serve, swaggerUi.setup(specs));
//const jsonParser = bodyParser.json()
//app.use(bodyParser.urlencoded({extended:false}));
app.use(bodyParser.json());
const mariadb= require('mariadb');
const pool= mariadb.createPool({
        host:'localhost',
        user:'root',
        password:'root',
        database:'sample',
        port:3306,
        connectionLimit:5
});

var cache = (duration)=>{
        return(req,res,next)=>{
                let key= '__express__' + req.originalUrl || req.url
                let cachedBody = mcache.get(key)
                if (cachedBody) {
                        console.log("returning from cache");
                        res.header('Content-Type','application/json');
                        res.status(200).send(cachedBody);
                        return;
                }else{
                        console.log("just inside else of cache");

                        res.sendResponse=res.send
                        res.send=(body)=>{
                                console.log("inside else of cache");
                                mcache.put(key,body,duration*1000);
                                res.header('Content-Type','application/json');
                                res.status(200).sendResponse(body)
                                }
                        console.log("just before next");
                        next();
                        }
        }
}



/**
 * @swagger
 * /foods:
 *    get:
 *      description: Return all records from foods table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object containing array of foods objects
 */
app.get('/foods',cache(100),(req,res)=>{
        console.log("inside the get method");
        pool.getConnection()
                .then(conn =>{
                        conn.query("SELECT * FROM foods")
                                .then((rows)=>{


                                        res.status(200).send(rows);
                                        conn.end();
                                        }).catch(err=>{
                                                console.log(err);
                                                conn.end();
                                        })
                                }).catch(err=>{
                                console.log("not connected");
                                })



});


/**
 * @swagger
 * /agents:
 *    get:
 *      description: Return all records from Agents table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object containing array of Agents objects
 */
app.get('/agents', cache(100), (req,res)=>{                             
        console.log("inside agents get");                               
        pool.getConnection()                                            
                .then(conn=>{                                           
                        conn.query("SELECT * from agents")              
                                .then((rows)=>{                         
                                                                        
                                                                        
                                        res.json(rows);                 
                                        conn.end();                     
                                        }).catch(err=>{                 
                                                console.log(err);       
                                                conn.end();             
                                        })                              
                                }).catch(err=>{                         
                                        console.log("Not connected");   
                                });                                     
});                                                                     
                                                                        
																		

/**
 * @swagger
 * /companys:
 *    get:
 *      description: Return all records from Company table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object containing array of Companys objects
 */																		
app.get('/companys',cache(100),(req,res)=>{
        console.log("inside company get");
        pool.getConnection()
                .then(conn=>{
                        conn.query("SELECT * from company")
                                .then((rows)=>{


                                        res.json(rows);
                                        conn.end();
                                        }).catch(err=>{
                                        console.log(err);
                                        conn.end();
                                        })
                                }).catch(err=>{
                                        console.log("Not connected");
                                });

});

/**
 * @swagger
 * definitions:
 *   Food:
 *     properties:
 *       ITEM_ID:
 *         type: string
 *       ITEM_NAME:
 *         type: string
 *       ITEM_UNIT:
 *         type: string
 *       COMPANY_ID:
 *         type: string
 */
/**
 * @swagger
 * /foods:
 *    post:
 *      description: add record to food table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Added data to food table
 *          500:
 *              description: Data already exists
 *          422:
 *              description: Errors in input object
 *      parameters:
 *          - name: Food
 *            description: food object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Food'
 *
 */
app.post('/foods', [
    check('ITEM_ID').isAlphanumeric()
    .withMessage('ITEM_ID should only be Alphanumeric').isLength({max:6}).withMessage("ITEM_ID should have maximum 6 numbers"),
    check('ITEM_NAME').trim().escape().custom(value => /^([a-zA-Z\s])*$/.test(value))
    .withMessage('ITEM_NAME should only have Alphabets').isLength({max:25}).withMessage("ITEM_NAME should have maximum 25 characters"),
    check('ITEM_UNIT').trim().escape().custom(value => /^([a-zA-Z\s])*$/.test(value))
    .withMessage('Unit should only have Alphabets').isLength({max:5}).withMessage("ITEM_UNIT should have maximum 5 characters"),
    check('COMPANY_ID').trim().escape().custom(value => /^([a-zA-Z\s])*$/.test(value))
    .withMessage('Company Id should only have Alphabets').isLength({max:6}).withMessage("COMPANY_ID should have maximum 6 characters"),
], function (req,res){                                                                                                                      
    console.log("inside post foods");      
   var errors= validationResult(req);
    
    if (!errors.isEmpty()) {
            return res.status(422).json({ errors: errors.array() })
          
    }
    else{                                                                                                                
                                                                                                                                                            
    pool.getConnection()                                                                                                                                        
        .then(conn=>{                                                                                                                                       
         conn.query("SELECT * from foods where ITEM_ID = ?" , [req.body.ITEM_ID])                                                                                 
            .then((row)=>{                                                                                                                              
                 if (row.length>0){                                                                                                                  
                     res.status(500).json({status:"Item ID already exists"});                                                                                
                     conn.end();                                                                                                         
                     return;                                                                                                                     
                    }                                                                                                                           
                 console.log("just before insertion");                                                                                               
                 conn.query("INSERT into foods value (?, ?,?,?)", [req.body.ITEM_ID, req.body.ITEM_NAME, req.body.ITEM_UNIT, req.body.COMPANY_ID])                   
                    .then((rows)=>{                                                                                                             
                        res.status(200).json({status: 'ok'});                                                                               
                        conn.end();                                                                                                         
                        })                                                                                                                  
                    })                                                                                                                          
                }).catch(err=>{                                                                                                                     
                     console.log("Not connected");                                                                                       
                     console.log(err);  
                     conn.end();                                                                                                   
                 });    
                }                                                                                                                     
});  


/**
 * @swagger
 * /foods/{id}:
 *    delete:
 *      description: Delete record in Foods table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Successfully deleted record from table
 *          422:
 *              description: Errors in input object
 *      parameters:
 *          - name: id
 *            in: path
 *            required: true
 *            type: string
 *
 */
app.delete('/foods/:id', [
    check('id').isAlphanumeric()
    .withMessage('id should only be Alphanumeric').isLength({max:6}).withMessage("Id should have maximum 6 numbers")
],(req,res)=>{
    console.log("inside delete");
    console.log(req.params.id);
    var errors= validationResult(req);
    
    if (!errors.isEmpty()) {
            return res.status(422).json({ errors: errors.array() })
          
    }
    else{ 
    pool.getConnection()                                                                                                                                        
        .then(conn=>{                                                                                                                                       
         conn.query("DELETE from foods where ITEM_ID = ?" , [req.params.id])                                                                                 
            .then((row)=>{                                                                                                                              
                if (row.affectedRows==0){
                    res.json({"status":"No record exists for given Id"})
                    conn.end();  
                    return;
                }
                res.json({"status":"Deleted"});
                conn.end();  
            })

            }).catch(err=>{
                console.log(err);
                conn.end();  
            });
        }                                                                                                         
    
})


/**
 * @swagger
 * definitions:
 *   Agent:
 *     properties:
 *       AGENT_CODE:
 *         type: string
 *       AGENT_NAME:
 *         type: string
 *       WORKING_AREA:
 *         type: string
 *       COMMISSION:
 *         type: number
 *       PHONE_NO:
 *         type: string
 *       COUNTRY:
 *         type: string
 * 
 */

/**
 * @swagger
 * /agents:
 *    put:
 *      description: add or update a record to Agents table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Added or Updated data to Agents table
 *          422:
 *              description: Errors in input object
 *      parameters:
 *          - name: Agent
 *            description: Agent object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Agent'
 *
 */
app.put("/agents",
[
    check('AGENT_CODE').isAlphanumeric()
    .withMessage('ITEM NAME should only be Alphanumeric').isLength({max:6}).withMessage("ITEM NAME should have maximum 6 numbers"),
    check('AGENT_NAME').isAlphanumeric()
    .withMessage('AGENT NAME should only be Alphanumeric').isLength({max:40}).withMessage("AGENT NAME should have maximum 40 numbers"),
    check('WORKING_AREA').isAlphanumeric()
    .withMessage('WORKING AREA should only be Alphanumeric').isLength({max:35}).withMessage("WORKING AREA should have maximum 35 numbers"),
    check('COMMISSION').trim().escape().custom(value => /^[0-9\.]*$/.test(value))
    .withMessage('COMMISSION should only be a decimal value').isLength({max:13}).withMessage("COMMISSION should have maximum 13 numbers"),
    check('PHONE_NO').isAlphanumeric()
    .withMessage('PHONE NO  should only be Alphanumeric').isLength({max:15}).withMessage("PHONE NO  should have maximum 15 numbers"),
    check('COUNTRY').isAlphanumeric()
    .withMessage('COUNTRY should only be Alphanumeric').isLength({max:25}).withMessage("COUNTRY should have maximum 25 numbers")
   
]
, (req, res) => {
    console.log(req.body);
    pool
      .getConnection()
      .then((conn) => {
        conn.query("SELECT * FROM agents where AGENT_CODE=?",[req.body.AGENT_CODE]).then((row)=>{
          if(row.length==0){
            conn.query("INSERT into agents value (?,?,?, ?,?,?)", [req.body.AGENT_CODE, req.body.AGENT_NAME, req.body.WORKING_AREA,req.body.COMMISSION,req.body.PHONE_NO,req.body.COUNTRY])                   
            .then((rows)=>{                                                                                                             
                conn.end();  
                 res.status(200).json({status: 'ok'});                                                                               
                 return;                                                                                                       
                })  
            }                                                                                                                
                                                                                                                                      
            else{
                conn.query("UPDATE agents SET AGENT_NAME=?, WORKING_AREA=? , COMMISSION=?, PHONE_NO=?, COUNTRY=? WHERE AGENT_CODE=?",
            [req.body.AGENT_NAME, req.body.WORKING_AREA,req.body.COMMISSION,req.body.PHONE_NO,req.body.COUNTRY,req.body.AGENT_CODE])
              .then((data) => {
                res.status(200).json({status: 'ok', "data":data});                                                                               
                        
                conn.close();
              })   
              .catch((err) => {
                console.log(err);
                conn.end();
              });
            }
        })
      .catch((err) => {
        console.log(err);
        conn.end();
      });
    });
  });


  /**
 * @swagger
 * /foods:
 *    patch:
 *      description: Update record to food table
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Updated data to food table
 *          404:
 *              description: No record for given ItemId
 *          422:
 *              description: Errors in input object
 *      parameters:
 *          - name: Food
 *            description: food object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Food'
 *
 */
app.patch('/foods',
[
    check('ITEM_ID').isAlphanumeric()
    .withMessage('ITEM_ID should only be Alphanumeric').isLength({max:6}).withMessage("ITEM ID should have maximum 6 numbers"),
    check('ITEM_NAME').isAlphanumeric()
    .withMessage('ITEM NAME should only be Alphanumeric').isLength({max:25}).withMessage("ITEM NAME should have maximum 25 numbers"),
    check('ITEM_UNIT').isAlphanumeric()
    .withMessage('ITEM UNIT should only be Alphanumeric').isLength({max:5}).withMessage("ITEM UNIT should have maximum 5 numbers"),
    check('COMPANY_ID').isAlphanumeric()
    .withMessage('COMPANY ID should only be Alphanumeric').isLength({max:6}).withMessage("COMPANY ID should have maximum 6 numbers"),
   
],

(req,res)=>{
    pool
      .getConnection()
      .then((conn) => {
        conn.query("SELECT * FROM foods where ITEM_ID=?",[req.body.ITEM_ID]).then((rows)=>{
            if(rows.length==0){
                conn.close();
                res.status(404).json({"status":"no object found for given item id"});
                return;
            }
            let row=rows[0];
            if (req.body.ITEM_NAME!=null && row.ITEM_NAME!=req.body.ITEM_NAME){
                row.ITEM_NAME=req.body.ITEM_NAME;
            }
            if (req.body.ITEM_UNIT!=null && row.ITEM_UNIT!=req.body.ITEM_UNIT){
                row.ITEM_UNIT=req.body.ITEM_UNIT;
            }
            if(req.body.COMPANY_ID!=null && row.COMPANY_ID!=req.body.COMPANY_ID){
                
                row.COMPANY_ID=req.body.COMPANY_ID;
            }
           // console.log(row);
            conn.query("UPDATE foods SET ITEM_NAME=? , ITEM_UNIT=?, COMPANY_ID=? WHERE ITEM_ID=?",[row.ITEM_NAME, row.ITEM_UNIT, row.COMPANY_ID, row.ITEM_ID])
            .then((data)=>{
                console.log(data);
                if (data.affectedRows>0)
                res.status(200).json({"status":"Updated"});
            })
        }).catch(err=>{
            console.log(err);

        });
    
                
})
});
                                                                                                                                                            
app.get("/say", (req,res)=>{
let k= req.query.keyword;
    console.log("keyword: ",k);
if (k === undefined || k.length ==0) {
	res.status(404).json({"status":"keyword passed as param is not valid"});
}
else{
axios
    .get('https://izjf2prqya.execute-api.us-east-1.amazonaws.com/dev/say-endpoint',{
      params:{
        keyword: k
      }
    })
    .then(response=>res.json(response.data))
    .catch(err=> console.log(err));
}



});



app.get('/',cache(100), (req,res)=>{                                                                                                                        
        console.log("inside get");                                                                                                                          
        var data= {"url1": 'http://157.245.141.13:3000/agents', "url2": 'http://157.245.141.13:3000/foods', "url3":'http://157.245.141.13:3000/companys'};  
        res.json(data);                                                                                                                                     
});                                                                                                                                                         
                                                                                                                                                            
app.listen(port,()=>{                                                                                                                                       
console.log(`Rest app is listening at http://localhost:${port}`);                                                                                           
});                                                                                                                                                         
                                                                                                                                                            
